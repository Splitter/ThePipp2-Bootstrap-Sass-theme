/****************************************************************
 *
 * CSS Percentage Circle
 * Author: Andre Firchow
 * http://firchow.net/
 *
 *
 * Converted to no longer depend on compass
 * Added variables for font-size(controls size of circles)
 * other various changes
 * 2018 - Mike Pippin
*****************************************************************/



// VARS
$circle-width: 0.08em;
$circle-width-hover: 0.04em;
$inner-circle-width: 0.13vw;

// Font sizes - controls size of circles
// -- set to vw to make responsive circles
$circles-small : 3vw;
$circles-normal: 6vw;
$circles-large : 7.8vw;

// colors default
$primary-circle-color: $primary;
$secondary-circle-color: $secondary;
$bg-circle-color: #f5f5f5;

$primary-circle-color-green: #4db53c;
$primary-circle-color-orange: #dd9d22;


// colors dark skin
$primary-circle-color-dark: #c6ff00;
$secondary-circle-color-dark: #777;
$bg-circle-color-dark: #666;

$primary-circle-color-green-dark: #5fd400;
$primary-circle-color-orange-dark: #e08833;



// CIRCLE
// classes 2 extend
.rect-auto{
	clip: rect(auto, auto, auto, auto);
}

.pie {
	position: absolute;
	border: $circle-width solid $primary-circle-color;
	width: 1 - (2 * $circle-width);
	height: 1 - (2 * $circle-width);
	clip: rect(0em, 0.5em, 1em, 0em);
	border-radius: 50%;
    transform: rotate(0deg);
}

.pie-fill {
    transform: rotate(180deg);
}


.circle-wrap{
    padding:0;
}
// main
.c100 {

	*, *:before, *:after {
		box-sizing: content-box;
	}

	position: relative;
	font-size: (2 * $circles-normal);
    @media #{$medium-screen} {
        font-size:$circles-normal;        
    }
    @media #{$X-large-screen} {
        font-size:($circles-normal - 2);        
    }
    @media #{$Xtreme-screen} {
        font-size:$circles-normal;        
    }
	width: 1em;
	height: 1em;
	border-radius: 50%;
	margin: 1vw auto;
	background-color: $secondary-circle-color;

	// center circle to its parent
	&.center{
		float: none;
		margin: 0 auto;
	}

	// bigger size
	&.big{
		font-size: (2 * $circles-large);
        @media #{$medium-screen} {
            font-size:$circles-large;        
        }
        @media #{$X-large-screen} {
            font-size:($circles-large - 2);        
        }
        @media #{$Xtreme-screen} {
            font-size:$circles-large;        
        }
	}

	// smaller size
	&.small{
		font-size: (2 * $circles-small);
        
        @media #{$medium-screen} {
            font-size: $circles-small;        
        }
        @media #{$X-large-screen} {
            font-size:( $circles-small - 2);        
        }
        @media #{$Xtreme-screen} {
            font-size: $circles-small;        
        }
	}

	// centered value inside circle
	> span {
		position: absolute;
		width: 100%;
		z-index: 1;
		left: 0;
		top: 0;
		line-height: 5em;
		font-size: 0.2em;
		color: $secondary-circle-color;
		display: block;
		text-align: center;
		white-space: nowrap;
        transition: ease-out all 0.2s;
	}

	// background inside the circle
	&:after{
		position: absolute;
		top: $circle-width;
		left: $circle-width;
		display: block;
		content: " ";
		border-radius: 50%;
		background-color: $bg-circle-color;
		width: 1 - (2 * $circle-width);
		height: 1 - (2 * $circle-width);
        transition: ease-out all 0.2s;

	}

	// the slice (mask)
	.slice {
		position: absolute;
		width: 1em;
		height: 1em;
		clip: rect(0em, 1em, 1em, 0.5em);
	}
    .slice:after {
        content: "";
        display: block;
        position: absolute;
        border: $inner-circle-width solid $primary-circle-color;
        border-radius:50%; 
        top: 1vw;
        left: 1vw;
        bottom: 1vw;
        right: 1vw;
        width: auto;
        height: auto;
        z-index:1;
        transition: ease-out all 0.2s;
    }
	// circle to show the status
	.bar {
		@extend .pie;
	}


	// loop to create all needed elements automatically
	@for $j from 51 through 100 {

		&.p#{$j} .slice {
			@extend .rect-auto;
		}

		&.p#{$j} .bar:after{
			@extend .pie-fill;
		}

		&.p#{$j} .fill{
			@extend .pie;
			@extend .pie-fill;
		}

	}

	// loop to rotate all 100 circles
	@for $j from 1 through 100 {
		&.p#{$j} .bar {
            transform: rotate((360/100*$j) + deg);
		}
	}



	// hover styles
	&:hover{

		cursor: default;

		> span {
			width: 3.33em;
			line-height: 3.33em;
			font-size: 0.3em;
			color: $primary-circle-color;
		}

		&:after{
			top: $circle-width-hover;
			left: $circle-width-hover;
			width: 1 - (2 * $circle-width-hover);
			height: 1 - (2 * $circle-width-hover);
		}

        .slice:after {
            opacity:0;   
        }
	}


	// override colors for the dark skin
	&.dark {

		background-color: $secondary-circle-color-dark;

		.bar,
		.fill{
			border-color: $primary-circle-color-dark !important;
		}

		> span {
			color: $secondary-circle-color-dark;
		}


		&:after{
			background-color: $bg-circle-color-dark;
		}

		&:hover{

			> span {
				color: $primary-circle-color-dark;
			}

		}

	}


	// green skin
	&.green{

		.bar, .fill { border-color: $primary-circle-color-green !important;}

		&:hover{
			> span { color: $primary-circle-color-green;}
		}

	}

		&.green.dark{

			.bar, .fill { border-color: $primary-circle-color-green-dark !important;}

			&:hover{
				> span { color: $primary-circle-color-green-dark;}
			}

		}


	// orange skin
	&.orange{

		.bar, .fill { border-color: $primary-circle-color-orange !important;}

		&:hover{
			> span { color: $primary-circle-color-orange;}
		}

	}

		&.orange.dark{

			.bar, .fill { border-color: $primary-circle-color-orange-dark !important;}

			&:hover{
				> span { color: $primary-circle-color-orange-dark;}
			}

		}


}